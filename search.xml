<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>190418_Dubstep</title>
      <link href="/2019/04/18/190418-Dubstep/"/>
      <url>/2019/04/18/190418-Dubstep/</url>
      
        <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><ol><li>문자열에서 “WUB”이라는 문자가 단어의 사이 사이에는 1개 이상  </li><li>단어의 맨 끝에는 0개 또는 1개가 올 수 있다.</li><li>“WUB”을 제거하고 단어와 단어 사이에 하나의 공백으로 return<br> ex. WUB  WUB  I  WUB  AM  WUB  WUB  X<br> return  “I AM X”  </li></ol><p><br></p><h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">songDecoder</span>(<span class="hljs-params">song</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> join = <span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> arr = [];</span><br><span class="line"><span class="hljs-keyword">var</span> wub = song.replace(<span class="hljs-regexp">/WUB/gi</span>, <span class="hljs-string">" "</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> a = wub.split(<span class="hljs-string">" "</span>);</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (a[i] !== <span class="hljs-string">""</span>) &#123;</span><br><span class="line">arr.push(a[i]);</span><br><span class="line">join = arr.join(<span class="hljs-string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> join;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="내-풀이"><a href="#내-풀이" class="headerlink" title="내 풀이"></a>내 풀이</h2><p><code>/search value/</code> : //사이에 검색할 문자를 입력<br><code>플래그</code><br><code>g</code>는 전체 모든 문자열을 변경한다는 말 : global<br><code>i</code>는 영문 대소문자 구분 없는 검색: case-intensive<br><code>m</code>은 여러 줄 검색 : multi-line search  </p><p><br></p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">songDecoder</span>(<span class="hljs-params">song</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/@+/gi</span>;</span><br><span class="line">song1 = song.replace(<span class="hljs-regexp">/WUB/gi</span>, ‘@’).replace(<span class="hljs-regexp">/@+/gi</span>, <span class="hljs-string">' '</span>).replace(<span class="hljs-regexp">/^ | $/gi</span>,‘’);</span><br><span class="line"><span class="hljs-keyword">return</span> song1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 다른점 1.</p><ul><li><code>replace(/WUB/gi, &quot; &quot;)</code>에서 공백을 @로 바꿔줌 <code>replace(/WUB/gi, ‘@’)</code></li><li>replace를 한번 더 써서 모든@를 하나의 공백으로 바꿔 줌  </li><li><code>replace(/^ | $/gi,‘’)</code> : 처음 시작부터 공백이 있거나 맨 뒤에 공백이 있으면 삭제  </li></ul><p><br></p><h3 id="팁"><a href="#팁" class="headerlink" title="팁"></a>팁</h3><p><code>trim( )</code> : 문자열 양 끝의 공백을 제거한다.<br><code>filter(word=&gt;word!=&#39;&#39;)</code> :  word라는 변수와 word가 “”(공백)이 아닌 것을 return<br><code>filter(parameter =&gt; return)</code> : 배열에 사용할 수 있음  </p><p><code>replace(/(^\s*)|(\s*$)/gi, &quot;&quot;)</code>  : 맨 앞과 맨 뒤의 공백 제거<br><code>replace(/(WUB)+/g,&quot; &quot;)</code> : 한번 이상(+)인 WUB를 공백 하나로 바꿔주기  </p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>190417_Multiples of 3 or 5</title>
      <link href="/2019/04/16/190417_Multiples%20of%203%20or%205/"/>
      <url>/2019/04/16/190417_Multiples%20of%203%20or%205/</url>
      
        <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><pre><code>1. number이하의 숫자가 주어진다.2. number보다 작은 모든 3의 배수를 다 더한다.3. number보다 작은 모든 5의 배수를 다 더한다.4. 다 더한 3의 배수와 5의 배수의 합을 return5. 단, 3과 5의 공배수는 한번만 더한다.</code></pre><a id="more"></a><p><br></p><h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">number</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> count3 = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> count5 = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; number / <span class="hljs-number">3</span>; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> temp = <span class="hljs-number">0</span>;</span><br><span class="line">temp = <span class="hljs-number">3</span> * i;</span><br><span class="line"><span class="hljs-keyword">if</span> ((temp % <span class="hljs-number">5</span>) !== <span class="hljs-number">0</span>) &#123;</span><br><span class="line">count3 += temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; number / <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">count5 += <span class="hljs-number">5</span> * i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> count3 + count5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="내-풀이"><a href="#내-풀이" class="headerlink" title="내 풀이"></a>내 풀이</h2><ol><li>number를 각각 3과 5로 나눈 몫을 구한다.</li><li>3의 몫으로 나온 숫자의 미만만큼( i ) 3을 곱하는 반복문으로 3의 배수를 구한다.<br> ex. 몫이 3.5이면 3 x 1, 3 x 2, 3 x 3 = 3, 6, 9를 구함.</li><li>3의 배수를 count3이라는 변수에 모두 더한다.</li><li><p>단, 3 x i 를 5로 나눈 나머지가 0이 된다면(5의 배수라면) 더하지 않는다.</p></li><li><p>5의 몫으로 나온 숫자의 미만만큼( i ) 5를 곱하는 반복문으로 5의 배수를 구한다.<br>ex. 몫이 3.5이면 5 x 1, 5 x 2, 5 x 3 = 5, 10, 15를 구함.</p></li><li>5의 배수를 count5이라는 변수에 모두 더한다.<br><code>3의 배수를 모두 더하는 과정에서 3과 5의 배수를 제거해줬으므로 5의 배수를 더하는 과정에서는 모두 더해도 상관없다.</code></li><li>count3 + count5를 반환한다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>190416_remove-element</title>
      <link href="/2019/04/16/190416_remove-element/"/>
      <url>/2019/04/16/190416_remove-element/</url>
      
        <content type="html"><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><pre><code>1. nums에는 정렬되지 않은 배열이 들어옴2. 배열 nums에서 val값이 있으면 삭제3. val값이 삭제된 배열 nums의 길이를 return</code></pre><a id="more"></a><p><br></p><h2 id="내-코드"><a href="#내-코드" class="headerlink" title="내 코드"></a>내 코드</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> removeElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, val</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (nums.indexOf(val) !== <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">            nums.splice(nums.indexOf(val), <span class="hljs-number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> nums.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="내-풀이"><a href="#내-풀이" class="headerlink" title="내 풀이"></a>내 풀이</h2><ol><li><p>배열에서 val의 값을 찾아 삭제하기  </p><ul><li><p>indexOf를 사용해서 배열 nums안에 있는 val의 index를 반환</p></li><li><p>splice를 사용해서 배열 nums에서 val의 index를 이용해 제거</p></li></ul></li></ol><ol start="2"><li><p>오류  </p><p>경우 1.</p></li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> nums = [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>] </span><br><span class="line"><span class="hljs-keyword">var</span> val = <span class="hljs-number">2</span></span><br><span class="line">i = <span class="hljs-number">0</span></span><br></pre></td></tr></table></figure><p>일때 nums에서 2가 하나 삭제된다.<br>nums =&gt; [2]</p><p>i = 1 일때 <code>nums의 길이가 1이 되었으므로 nums.length는 1</code>이 되어 반복문을 빠져나온다.<br>nums =&gt; [2]</p><p><strong>오류 발생</strong><br><code>solution</code> : nums가 하나 삭제될때마다 length가 줄어들고 기존 숫자들의 index가 바뀌기 때문에 i에서 1을 빼주어야 한다.</p><p><br></p><h2 id="다른-사람-풀이"><a href="#다른-사람-풀이" class="headerlink" title="다른 사람 풀이"></a>다른 사람 풀이</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> removeElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, val</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (nums[i] === val) &#123;</span><br><span class="line">            nums.splice(i, <span class="hljs-number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> nums.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="다른점-1"><a href="#다른점-1" class="headerlink" title="다른점 1."></a>다른점 1.</h3><pre><code>- nums의 특정 index값과 val을 비교  </code></pre><p><strong>javascript에는 연산자를 두개를 잘 쓰지 않는다.  ===을 쓸 것!</strong></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>190313_hexo</title>
      <link href="/2019/03/13/190313_hexo/"/>
      <url>/2019/03/13/190313_hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="실행-전"><a href="#실행-전" class="headerlink" title="실행 전"></a>실행 전</h3><ol><li>node js, git 설치 필수</li><li>node js 버전에 따라 실행되지 않을 수 있다.</li><li>window는 git bash에서 작업 시 작업 안될 수 있다.</li></ol><a id="more"></a><p><code>npm install -g hexo-cli</code> - 헥소 설치<br><code>hexo --version</code> - 헥소 버전확인<br><code>init blog</code> -블로그(파일) 생성<br><code>cd blog</code> - (블로그 이동)[블로그 안에서 해줘야 함]<br><code>npm install</code> - npm 설치<br><code>npm install hexo-deployer-git --save</code><br><code>hexo new port &quot;title&quot;</code><br><code>hexo generate</code><br><code>hexo server</code> - 서버 확인<br><code>hexo deploy</code></p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>190306_git, web</title>
      <link href="/2019/03/06/190306_git,%20web/"/>
      <url>/2019/03/06/190306_git,%20web/</url>
      
        <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><code>Git</code> :  <code>분산 버전 관리 시스템</code>, 여러 개발자가 같은 프로젝트를 진행할 때 자신의 컴퓨터로 협업하면서 개발이 가능한 시스템이다.  </p><p>git에는 로컬 저장소에 commit하기 전, <code>index 단계</code>가 있다.</p><p><code>index 단계</code>는 <code>stage 영역</code>이라고도  한다.</p><p><code>stage 영역</code> : 작업한 내용을 로컬 저장소에 commit하려고 할 때, commit할 파일에 대한 정보를 저장하는 공간이다.</p><p><br><br><a id="more"></a><br><img src="/images/img/190306/Git.png" width="700" title="test_title" alt="test_alt"></p><p><br></p><h2 id="Commit-과정-발생한-에러"><a href="#Commit-과정-발생한-에러" class="headerlink" title="Commit 과정 발생한 에러"></a>Commit 과정 발생한 에러</h2><p>git bash로 git에 있는 폴더를 연결을 하다 에러가 났다.</p><p>수업시간에 실습했던 것은 아무 파일이 없는 <code>새 폴더</code>였다.</p><p>하지만 기존에 내 git에 있는 폴더에 새 파일을 commit하려고 하니 에러가 발생했다.</p><p>에러 메세지에는 git –help라는 말과 git –pull이라는 말이 적혀있었는데 솔직히 무슨 말인지 못알아들었었다.</p><p><br></p><p>하지만, 다음 날에 조원과 협업을 하는 과정에서 해결했다.  </p><p>기존 git의 폴더에 저장된 파일이 있을 경우 내 workspace에다 파일을 끌어와야 했다.</p><p><code>[git clone + git폴더 주소 + 주소에 있는 파일을 복사할 내 workspace 폴더의 이름]</code></p><p>이렇게 입력을 먼저 해주고 <code>[git remote get-url origin]</code>과 연결한 workspace 폴더에서 [ls]을 통해 잘 연결되었는지 확인한다.  </p><p><strong>※ 여기서 origin은 기본값</strong></p><p><br></p><h2 id="잘-연결이-되었다면"><a href="#잘-연결이-되었다면" class="headerlink" title="잘 연결이 되었다면!"></a>잘 연결이 되었다면!</h2><pre><code>1. git add index.html (index.html이라는 파일을 만들었다는 가정 하에)2. git commit3. git push -u origin master (-u는 처음 commit할 때 한번만 써주면 된다.)</code></pre><p><strong>※ 중요한 것은 틈틈히 git status를 통해 상태를 확인하면서 작업할 것!</strong></p>]]></content>
      
      
      <categories>
          
          <category> Unknown term </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unknown term </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
