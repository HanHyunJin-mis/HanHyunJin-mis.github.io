{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"190306_git, web","text":"GitGit : 분산 버전 관리 시스템, 여러 개발자가 같은 프로젝트를 진행할 때 자신의 컴퓨터로 협업하면서 개발이 가능한 시스템이다. git에는 로컬 저장소에 commit하기 전, index 단계가 있다. index 단계는 stage 영역이라고도 한다. stage 영역 : 작업한 내용을 로컬 저장소에 commit하려고 할 때, commit할 파일에 대한 정보를 저장하는 공간이다. Commit 과정 발생한 에러git bash로 git에 있는 폴더를 연결을 하다 에러가 났다. 수업시간에 실습했던 것은 아무 파일이 없는 새 폴더였다. 하지만 기존에 내 git에 있는 폴더에 새 파일을 commit하려고 하니 에러가 발생했다. 에러 메세지에는 git –help라는 말과 git –pull이라는 말이 적혀있었는데 솔직히 무슨 말인지 못알아들었었다. 하지만, 다음 날에 조원과 협업을 하는 과정에서 해결했다. 기존 git의 폴더에 저장된 파일이 있을 경우 내 workspace에다 파일을 끌어와야 했다. [git clone + git폴더 주소 + 주소에 있는 파일을 복사할 내 workspace 폴더의 이름] 이렇게 입력을 먼저 해주고 [git remote get-url origin]과 연결한 workspace 폴더에서 [ls]을 통해 잘 연결되었는지 확인한다. ※ 여기서 origin은 기본값 잘 연결이 되었다면!1. git add index.html (index.html이라는 파일을 만들었다는 가정 하에) 2. git commit 3. git push -u origin master (-u는 처음 commit할 때 한번만 써주면 된다.) ※ 중요한 것은 틈틈히 git status를 통해 상태를 확인하면서 작업할 것!","link":"/2019/03/06/190306_git, web/"},{"title":"190313_hexo","text":"Hexo실행 전 node js, git 설치 필수 node js 버전에 따라 실행되지 않을 수 있다. window는 git bash에서 작업 시 작업 안될 수 있다. npm install -g hexo-cli - 헥소 설치hexo --version - 헥소 버전확인init blog -블로그(파일) 생성cd blog - (블로그 이동)[블로그 안에서 해줘야 함]npm install - npm 설치npm install hexo-deployer-git --savehexo new port &quot;title&quot;hexo generatehexo server - 서버 확인hexo deploy","link":"/2019/03/13/190313_hexo/"},{"title":"190416_TIL","text":"오늘 한 일오늘 느낀 점","link":"/2019/04/16/190416-TIL/"},{"title":"190417_TIL","text":"오늘 한 일오늘 느낀 점","link":"/2019/04/17/190417-TIL/"},{"title":"190418_TIL","text":"오늘 한 일오늘 느낀 점","link":"/2019/04/18/190418-TIL/"},{"title":"190419_TIL","text":"오늘 한 일오늘 느낀 점","link":"/2019/04/19/190419-TIL/"},{"title":"190420_TIL","text":"오늘 한 일 Codewars 알고리즘 문제 풀기 [Codewars] Directions Reduction 오늘 느낀 점","link":"/2019/04/20/190420-TIL/"},{"title":"190421_TIL","text":"오늘 한 일오늘 느낀 점","link":"/2019/04/21/190421-TIL/"},{"title":"190422_TIL","text":"오늘 한 일 컴퓨터 공학 기초 수업 내용 정리 name space stack frame call by value와 call by reference 전역 변수 vs 지역변수 linear search, binary search Codewars 알고리즘 스터디 후 풀이 리뷰 [Codewars] Directions Reduction Codewars 다음 알고리즘 문제 풀이 생각하기 [Codewars] Sum of Pairs 오늘 느낀 점 컴퓨터 공학을 짧은 시간에 배운다는 것은 불가능했다…. 나중에 복학하면 컴퓨터 공학에 대해 수업을 들어보고 제대로 배우고 싶다!","link":"/2019/04/22/190422-TIL/"},{"title":"190422_variables, function, closure, binary, linear search","text":"함수 namespace stack frame call by value(왜 call by value와 reference를 나누었을까?) call by reference~ call by reference object 전역 변수(global) vs 지역변수(locsl variable)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950a = 10def func(): b = 20# 실행되지 않았기 때문에 아직 지역변수가 선언되지 않았다# 지역변수는 함수가 실행될 때 만들어 진다.func()a = 10def f(): b=20 def g(): c = 30 print(a, b, c) g()f()# 10 20 30# g는 f의 nested functiondef f(): b=20 def g(): b = 30 def h(): c = 30 print(a, b, c) h() g()f()# 10 30 30a = 10def func(): # global이라는 키워드를 사용하면 지역변수를 전역변수로 사용할 수 있다. (파이썬에서만 존재) global a # func의 지역변수 a a = 20 print(a, 'in func')# 밖의 a와 안의 a를 어떻게 구분할 것인가? -&gt; stack framefunc()print(a, 'in main')# 20 in func# 10 in main name space공간 안에서 선언된 기호 들을 유일한 범위에 두게 하는 선언 영역?하나의 독립된 공간을 할당해 주는 것? 12345678910111213141516def f(): a = 10 def g(): b = 20 def h(): # 지역변수가 아닌 변수 중에 b를 골라라(전역도 아님, 상위에 b가 없을 경우 error가 남) nonlocal b b = 30 print(b, 'in h') h() print(b, 'in g') g()f()# 30 in h# 30 in g python test : http://www.pythontutor.com/visualize.html#mode=display call by value, call by reference, call by object reference함수를 실행할 때 인자(parameter)를 어떻게 전달할 것인가?call by value 값을 단순하게 복사함, 인자를 값으로 전달했기 때문에값 10을 복사해서 change_value frame에 10이라는 값을 전달함 call by value : http://www.pythontutor.com/visualize.html#mode=display 12345678910// 매개 변수는 오른쪽에서 왼쪽으로 쌓이고 위에서 밑으로 쌓인다.void change_value(int x, int val) &#123; x = val; printf(\"x : %d in change_value \\n\", x);&#125;int main(void) &#123; int x = 10; change_value(x, 20); printf(\"x : %d in main \\n\", x);&#125; call by reference 값의 주소값을 전달한다(참조값) -&gt; 주소값을 통해서 언제든지 접근할 수 있음.*x -&gt; 역참조 (함수가 실행되는 도중 stack frame 밖의 데이터에 접근해 수정할 수 있다.) 메모리 자체를 의미 call by reference : https://github.com/ythwork/FDS/blob/master/functions/call_by/call_by_reference/call_by_reference.pdf 1234567891011#include &lt;stdio.h&gt;void change_value(int * x, int val) &#123; *x = val; printf(\"x : %d in change_value \\n\", *x);&#125;int main(void) &#123;// 함수를 호출하면 stack frame이 쌓인다. int x = 10; change_value(&amp;x, 20); printf(\"x : %d in main \\n\", x);&#125; 값을 전달할 때도 주소 ‘값’을 전달 할 때 둘 다 call by value가 맞다.*x가 아니라 x에 새로운 값을 집어 넣었을 때(할당)를 call by reference 결론 (추후에 수정) call by value어떠한 방법을 쓰더라도 밖의 데이터에 접근이 불가능하다. call by referencestack frame이 쌓였고 실행 주도권이 자신에게 있는 상태에서 자신의 stack frame 밖에 있는 어떤 데이터에 접근해서 수정이 가능한 상태이다.파이썬의 global call by object reference (call by assignment)나중에… frist class functionfirst class function일 수 있는 조건 함수를 인자(argument)로 전달 1234567891011def f(func, a, b): return func(a, b)def g(a, b): return a + ba = 10b = 20f(g, a, b)# -&gt; 함수를 인자로 전달하는 것이 가능하다.# 30 함수를 리턴(return)값으로 전달 123456789101112def calc(kind): if kind =='add': def add(a,b): return a + b return add elif kind =='sub': def sub(a, b): return a - b return subadder= calc('add')adder(10, 20)# 30 함수를 변수에 전달 123t = gt(20, 30)# 50 익명함수(이름이 없는 함수)나중에… linear search (선형 탐색)알고리즘 성능 평가 절대 시간 기준 (기준이 될 수 없다.) ex. 함수의 실행이 몇 초안에 끝난다. -&gt; 같은 함수라도 컴퓨터의 성능에 따라 다르다. 상대 시간 기준 연산 횟수로 잡는다.(+, -, *, and, if) -&gt;가장 지배적인(느린 것) 것을 기준으로 잡는다. li =[5, 4, 3, 1, 2, 10, 25] 여기서 5를 찾으면 최선의 경우 25를 찾으면 최악의 경우이다.(최악의 경우를 기준으로 계산) 예외 - quick sort는 average case로 찾는다 (왜?) binary search (이진 탐색)조건 인자로 들어오는 데이터가 정렬이 되어 있어야 한다. (연속될 필요는 없음) =&gt; T(n)이 딱 떨어진다.","link":"/2019/04/22/190422_variables, function, closure, binary, linear search/"},{"title":"190423_TIL","text":"오늘 한 일 Codewars 알고리즘 스터디 후 풀이 리뷰 [Codewars] Sum of Pairs Codewars 다음 알고리즘 문제 풀이 생각하기 [Codewars] Maximum subarray sum 오늘 느낀 점 블로그에는 내가 정확히 아는 정보만 작성하자. 알고리즘 공부법을 세우자! 한문제는 길어야 2시간 정도만 고민해본다.(제일 안되는 부분…) 알고리즘 공부 참고 블로그 : Heee’s Development Blog","link":"/2019/04/23/190423-TIL/"},{"title":"[Codewars] Directions Reduction","text":"문제불필요한 경로 줄이기 동쪽, 서쪽, 남쪽, 북쪽의 방향이 있다. 남쪽으로 갔다 북쪽으로 가면 원점이므로 불필요한 이동 동쪽으로 갔다 서쪽으로 가면 원점이므로 불필요한 이동 불필요한 이동을 줄여 최단 이동을 구하기ex. [&quot;NORTH&quot;, &quot;SOUTH&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;, &quot;WEST&quot;, &quot;NORTH&quot;, &quot;WEST&quot;] -&gt; [&quot;WEST&quot;] 내 코드123456789101112131415161718192021function dirReduc(arr) &#123; direc = &#123; \"NORTH\": \"SOUTH\", \"SOUTH\": \"NORTH\", \"EAST\": \"WEST\", \"WEST\": \"EAST\" &#125;; var b = []; for (i = 0; i &lt; arr.length; i++) &#123; if ((b == []) || (direc[b[b.length - 1]] != arr[i])) &#123; b.push(arr[i]); &#125; else &#123; c = b.pop(); if (direc[c] == arr[i]) &#123; arr.splice(i - 1, 2); i = i - 2; &#125; &#125; &#125; return arr;&#125; 내 풀이 dictionary 형태로 각 방향을 key 값으로 value 값을 반대로 할당하기 배열의 길이만큼 for문을 돌려 빈 배열로 값을 하나씩 이동 만약 b 배열의 마지막에 다음번 넣으려는 배열과 짝이면 삭제 풀이 과정 중 어려움1splice로 배열 두개를 삭제하고 다시 반복문을 돌아갈 때는 i에 2를 빼주어야 한다. 다른 사람 풀이1234567891011121314151617function dirReduc(arr)&#123; if(arr.length &lt;= 1) return arr; var direction = &#123;\"NORTH\": \"SOUTH\", \"EAST\": \"WEST\", \"SOUTH\": \"NORTH\", \"WEST\": \"EAST\"&#125;; for(var i = 0; i &lt; arr.length; i++)&#123; if(direction[arr[i]] == arr[i+1])&#123; arr.splice(i, 2); i = -1; &#125; &#125; return arr;&#125; 다른점 배열의 해당 요소를 key값으로 가지는 value값이 배열의 다음 값과 같다는 방법","link":"/2019/04/21/[Codewars] Directions Reduction/"},{"title":"[Codewars] Dubstep","text":"문제 문자열에서 “WUB”이라는 문자가 단어의 사이 사이에는 1개 이상 단어의 맨 끝에는 0개 또는 1개가 올 수 있다. “WUB”을 제거하고 단어와 단어 사이에 하나의 공백으로 return ex. WUB WUB I WUB AM WUB WUB X return “I AM X” 내 코드12345678910111213function songDecoder(song) &#123; var join = \"\"; var arr = []; var wub = song.replace(/WUB/gi, \" \"); var a = wub.split(\" \"); for (i = 0; i &lt; a.length; i++) &#123; if (a[i] !== \"\") &#123; arr.push(a[i]); join = arr.join(' '); &#125; &#125; return join;&#125; 내 풀이/search value/ : //사이에 검색할 문자를 입력플래그g는 전체 모든 문자열을 변경한다는 말 : globali는 영문 대소문자 구분 없는 검색: case-intensivem은 여러 줄 검색 : multi-line search 다른 사람 풀이12345function songDecoder(song) &#123; var reg = /@+/gi; song1 = song.replace(/WUB/gi, ‘@’).replace(/@+/gi, ' ').replace(/^ | $/gi,‘’); return song1;&#125; 다른점 replace(/WUB/gi, &quot; &quot;)에서 공백을 @로 바꿔줌 replace(/WUB/gi, ‘@’) replace를 한번 더 써서 모든@를 하나의 공백으로 바꿔 줌 replace(/^ | $/gi,‘’) : 처음 시작부터 공백이 있거나 맨 뒤에 공백이 있으면 삭제 알게 된 것trim( ) : 문자열 양 끝의 공백을 제거한다.filter(word=&gt;word!=&#39;&#39;) : word라는 변수와 word가 “”(공백)이 아닌 것을 returnfilter(parameter =&gt; return) : 배열에 사용할 수 있음 replace(/(^\\s*)|(\\s*$)/gi, &quot;&quot;) : 맨 앞과 맨 뒤의 공백 제거replace(/(WUB)+/g,&quot; &quot;) : 한번 이상(+)인 WUB를 공백 하나로 바꿔주기","link":"/2019/04/18/[Codewars] Dubstep/"},{"title":"[Codewars] Multiples of 3 or 5","text":"문제 number이하의 숫자가 주어진다. number보다 작은 모든 3의 배수를 다 더한다. number보다 작은 모든 5의 배수를 다 더한다. 다 더한 3의 배수와 5의 배수의 합을 return 단, 3과 5의 공배수는 한번만 더한다. 내 코드123456789101112131415function solution(number) &#123; var count3 = 0; var count5 = 0; for (i = 1; i &lt; number / 3; i++) &#123; var temp = 0; temp = 3 * i; if ((temp % 5) !== 0) &#123; count3 += temp; &#125; &#125; for (i = 1; i &lt; number / 5; i++) &#123; count5 += 5 * i; &#125; return count3 + count5;&#125; 내 풀이 number를 각각 3과 5로 나눈 몫을 구한다. 3의 몫으로 나온 숫자의 미만만큼( i ) 3을 곱하는 반복문으로 3의 배수를 구한다. ex. 몫이 3.5이면 3 x 1, 3 x 2, 3 x 3 = 3, 6, 9를 구함. 3의 배수를 count3이라는 변수에 모두 더한다. 단, 3 x i 를 5로 나눈 나머지가 0이 된다면(5의 배수라면) 더하지 않는다. 5의 몫으로 나온 숫자의 미만만큼( i ) 5를 곱하는 반복문으로 5의 배수를 구한다.ex. 몫이 3.5이면 5 x 1, 5 x 2, 5 x 3 = 5, 10, 15를 구함. 5의 배수를 count5이라는 변수에 모두 더한다.3의 배수를 모두 더하는 과정에서 3과 5의 배수를 제거해줬으므로 5의 배수를 더하는 과정에서는 모두 더해도 상관없다. count3 + count5를 반환한다.","link":"/2019/04/16/[Codewars] Multiples of 3 or 5/"},{"title":"[Codewars] Persistent Bugger","text":"문제 숫자를 각각 1자리 수로 떼서 곱하기 연산 자리수가 1이 될 때까지 연산한다. 1이 될 때까지 연산한 횟수를 returnex.39 -&gt; 3 x 9 = 2727 -&gt; 2 x 7 = 1414 -&gt; 1 x 4 = 4return 3 내 코드123456789101112131415function persistence(num) &#123; var str = num.toString(); var count = 0; while (str.length !== 1) &#123; var sum = 1; for (i = 0; i &lt; str.length; i++) &#123; if (str.length !== 1) &#123; sum *= Number(str[i]); &#125; &#125; count++; str = sum.toString(); &#125; return count;&#125; 내 풀이 num을 string으로 만들기 (num의 길이를 구하기 위해) 반복문 밖에 num의 길이를 변수에 저장 반복문 선언 (1. while, 2. for) while문은 num이 한자리 수가 될 때까지 반복을 실행한다. for문은 num의 자릿수만큼 반복을 실행하며 sum에 각 자리수를 곱한다. (이 때, 문자를 숫자로 변환) for문 밖에 각 자릿수를 곱한 sum을 num에 넣어준다. 다른 사람 풀이1234567891011function persistence(num) &#123; var i = 0; while (num &gt;= 10) &#123; String(num).split(\"\").reduce(function (prev, value) &#123; num = Number(prev) * Number(value); return num; &#125;); i++; &#125; return i;&#125; 다른점 num의 길이를 구해 한자리 수가 될 때까지가 아닌 num자체가 10 미만이 되면 반복문이 끝나게 만듬 reduce () 알게 된 것reduce () 함수는 배열의 각 요소에 실행되고 4개의 인자를 가진다. accumulator(누산기) currentValue(현재 값) currentIndex(현재 인덱스) array(원본 배열)reduce 함수의 반환 값은 누산기에 할당되고 reduce 함수가 돌고 있을 때는 유지되기 때문에 최종 결과 값은 하나의 값이 된다. 12345[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) &#123; return accumulator + currentValue;&#125;,firstValue); // firstValue부터 계산된다. // firstValue가 없으면 accumulator는 0, currentValue는 1로 계산된다.","link":"/2019/04/21/[Codewars] Persistent Bugger/"},{"title":"[Codewars] Sum of Pairs","text":"문제 ints라는 배열과 s라는 숫자가 주어진다. ints라는 배열에서 숫자 두개의 합이 s라는 숫자가 되어야 한다. 경우가 여러 개일 때는 합인 숫자의 인덱스 들의 수가 가장 작은 것을 반환 숫자는 자신이 두번 나올 수 없으며, 음수의 배열 값도 존재한다. ex. ints = [1, 4, 8, 7, 0, 15], s = 8 즉, 1과 7 또는 8과 0일 경우에는 인덱스 수가 가장 작은 1과 7을 반환한다. 내 코드내 풀이 내풀이 112```2. 풀이 과정 중 어려움 ` 다른 사람 풀이다른점1. 알게 된 것","link":"/2019/04/23/[Codewars] Sum of Pairs/"},{"title":"[LeetCode] 27. remove-element","text":"문제 nums에는 정렬되지 않은 배열이 들어옴 배열 nums에서 val값이 있으면 삭제 val값이 삭제된 배열 nums의 길이를 return 내 코드123456789var removeElement = function (nums, val) &#123; for (i = 0; i &lt; nums.length; i++) &#123; if (nums.indexOf(val) !== -1) &#123; nums.splice(nums.indexOf(val), 1); i--; &#125; &#125; return nums.length;&#125;; 내 풀이 배열에서 val의 값을 찾아 삭제하기 indexOf를 사용해서 배열 nums안에 있는 val의 index를 반환 splice를 사용해서 배열 nums에서 val의 index를 이용해 제거 오류 경우 1. 123var nums = [2, 2] var val = 2i = 0 일때 nums에서 2가 하나 삭제된다.nums =&gt; [2] i = 1 일때 nums의 길이가 1이 되었으므로 nums.length는 1이 되어 반복문을 빠져나온다.nums =&gt; [2] 오류 발생solution : nums가 하나 삭제될때마다 length가 줄어들고 기존 숫자들의 index가 바뀌기 때문에 i에서 1을 빼주어야 한다. 다른 사람 풀이123456789var removeElement = function (nums, val) &#123; for (var i = 0; i &lt; nums.length; i++) &#123; if (nums[i] === val) &#123; nums.splice(i, 1); i--; &#125; &#125; return nums.length;&#125;; 다른점 nums의 특정 index값과 val을 비교 javascript에는 연산자를 두개를 잘 쓰지 않는다. ===을 쓸 것!","link":"/2019/04/16/[LeetCode] 27. remove-element/"},{"title":"SCSS 특강","text":"node sass 설치 $ npm i -g node-sass $ npm i -D node-sass 버전확인 : $ node-sass -v$ node -v SCSS vs CSS nesting - 중첩css상위 계층 셀렉터 반복 기입12345678910111213nav &gt; ul &#123; margin: 0; padding: 0; list-style: none;&#125;nav &gt; ul &gt; li &#123; display: inline-block;&#125;nav &gt; ul &gt; li &gt; a &#123; display: block; padding: 6px 12px; text-decoration: none;&#125; scss대세는 자바스크립트 안에 css코드를 삽입하는 방식으로 변하고 있음scss 코드를 css코드로 변환시켜주어야 한다.전처리 - 입력 데이터를 처리하여 컴파일러와 같은 다른 프로그램의 입력으로 사용되는 출력을 생성출처: https://en.wikipedia.org/wiki/Preprocessing 웹 브라우저에서 스타일링 언어로 인정하는 것은 css하나뿐임scss는 html처럼 nesting 되게 스타일을 작성한다.123456789101112131415nav &#123; ul &#123; margin: 0; padding: 0; list-style: none; li &#123; display: inline-block; a &#123; display: block; padding: 6px 12px; text-decoration: none; &#125; &#125; &#125;&#125; 그래서 command 입력$ node-sass scss-overview.scss scss-overview.css scss 파일을 css파일로 변환한다. 우리는 변환된 css 파일을 연결 설치한 node-sass는 이 변환작업을 위한 CLI를 제공한다.CLI란? 이 변환 작업을 빌드(build) 또는 컴파일(compile) 이라고 한다.또한 이 변환은 반드시 웹이 배포 되는 시점 이전에 처리 되므로 &#39;전처리(preprocess)&#39;이며, 이것이 Sass가 전처리기로 불리는 이유가 이것이다. node-sass 명령어--watch : [input]의 변화를 지속적으로 감지하여 [output]으로 빌드한다 (input, output에 넣으면 자동으로 계속 빌드된다.)./style/scss : [input]-o ./style/css : [output directory] sass를 쓰게 되면 최신 css변수를 지원하지 않는 곳에서도 css를 사용할 수 있다.sass에서는 //을 주석으로 쓸 수 있다. ‘$’ 문자로 시작되는 식별자로 선언. 123456$font-stack : Helvetica, sans-serif;$primary-color : #333;body &#123; font: 100% $font-stack; color: $primary-color;&#125; 1234body &#123; font: 100% Helvetica, sans-serif; color: #333; &#125; $ node-sass ./scss -o ./cssscss폴더를 만들어 폴더를 통째로 css로 바꿔준다.bundling -&gt; overhead를 줄이기 위해 @import *./partials*;sass파일 안에서 sass파일을 불러올 때는 위에 생략 가능 import로 연결하면 두번째 파일에 연결되어 있는 파일이 같이 css에 적히지만 파일이 두개가 생기는 문제 발생두번째 파일 맨 앞에 _(언더바)를 붙이면 된다.ex. _sass-overview2 @import “./sass-overview2”;import한 위치에 파일 내용이 그대로 붙여짐 @import ./partilas;partials 파일 : 이름이 ‘_’로 시작하는 sass 파일합쳐지는 쪽의 sass 파일(sass-overview.scss)에서 partials 파일 불러오기 :‘@import‘ 룰을 사용 (.sass, .scss 생략 가능) sass-overview.scss@import “./sass-overview2”; $font-stack : Helvetica, sans-serif;$primary-color : #333; body { font: 100% $font-stack; color: $primary-color;} sass-overview2.scss.element { width: 100px;} sass-overview.css.element { width: 100px;}body { font: 100% Helvetica, sans-serif; color: #333;} sass-overview2.css.element { width: 100px;} @mixin‘@mixin’ 디렉티브를 통해 선언하며 함수처럼 매개변수를 받을 수 있음.‘@include’ 디렉티브를 통해 CSS 룰-셋 에서 믹스인을 호출 할 수 있으며, 호출문이 해당 믹스인의 콘텐츠로 치환. 12345678@mixin transform($property) &#123; -webkit-transform: $property; -ms-transform: $property; transform: $property;&#125;.box &#123; @include transform(rotate(30deg));&#125; 12345.box &#123; -webkit-transform: rotate(30deg); -ms-transform: rotate(30deg); transform: rotate(30deg); &#125; @extend 디렉티브@extned + 상속받고자 하는 룰셋ex. %message-shared { //상속을 하고자 하는 룰셋, %를 앞에 작성하면 placeholder 셀렉터 (호출하지 않으면 css파일에 나오지 않음, %가 없으면 실체를 가지게 된다.)가 된다. border: 1px solid #ccc; padding: 10px; color: #333; } 1234567891011121314151617181920212223242526272829%message-shared &#123; border: 1px solid #ccc; padding: 10px; color: #333;&#125;%equal-heights &#123; display: flex; flex-wrap: wrap;&#125;.message &#123; @extend %message-shared;&#125;.success &#123; @extend %message-shared; border-color: green;&#125;.error &#123; @extend %message-shared; border-color: red;&#125;.warning &#123; @extend %message-shared; border-color: yellow;&#125; %message-shared를 상속받은 셀렉터들이 같이 적힌다. 1234567891011121314151617.message, .success, .error, .warning &#123; border: 1px solid #ccc; padding: 10px; color: #333; &#125;.success &#123; border-color: green; &#125; // 고유하게 갖는 것, extend로 공통으로 상속 받은 룰셋으로 만들지 않았기 때문.error &#123; border-color: red; &#125;.warning &#123; border-color: yellow; &#125; operator(연산자)사칙연산모듈러 연산123456789101112131415161718.container &#123; width: 100%;&#125;aside[role=\"complementary\"] // attribute selector, aside 내에 role이 main인 것을 선택aside[role] aside 내에 role이라는 attribute를 가지고 있으면 선택[role] 어떤 element이든 상관없이 선택[attribute ~= \"value\"] : 위치 상관없이 가지고 있는 값[attribute ^= \"value\"] : 시작하는 값[attribute $= \"value\"] : 끝나는 값article[role=\"main\"] &#123; float: left; width: 600px / 960px * 100%;&#125;aside[role=\"complementary\"] &#123; float: right; width: 300px / 960px * 100%;&#125; 1234567891011.container &#123; width: 100%; &#125;article[role=\"main\"] &#123; float: left; width: 62.5%; &#125;aside[role=\"complementary\"] &#123; float: right; width: 31.25%; &#125; 기존 CSS 문법을 확장시킨 Sass의 요소들 nested rule 부모 참조 셀렉터 &amp; nested properties inline comment 부모참조 셀렉터article {&amp;.section1 { // 부모참조 셀렉터 &amp;width: 800px;margin:10px auto;font: { // nested propertiessize:14px;family:’Nanum Gothic’, sans-serif;} &amp;는 안써도 오류는 안난다. –css–style$black:#000; // variable td { padding: 12px 8px; text-align: center; border: 1px solid rgba($black, 0.4);} article.section1 table td { padding: 12px 8px; text-align: center; border: 1px solid rgba(0, 0, 0, 0.4);} 룰-셋 블록 내에 선언 시 지역변수. .x{ $var_name : “var_value” } 지역변수 뒤에 ‘!global’ 선언 시 전역변수. (밖에서도 접근할 수 있음) .x{ $var_name : “var_value” !global } 변수 이름 내의 ‘-’ 와 ‘_’ 문자를 구분하지 않음. $var_name = $var-name scss $main-width:100%; #sidebar2 { width: ($main_width/10); } css #sidebar2 { width: 10%; } ‘!default’ 로 기본값 지정 가능.$content: “First content”;$content: “Second content?” !default;default 때문에 무조건 첫번째 데이터 값으로 설정된다. #main {content: “First content”;new-content: “First time reference”; } data typehttps://sass-lang.com/documentation/file.SASS_REFERENCE.html#data_typesscss의 string type은 두가지가 존재“ “가 있는 문자열, “ “가 없는 문자열 property 이름 안에도 변수의 이름을 넣어 줄 수 있다.prop #{$var} $List1 : var1 var2(구분자는 , 와 공백이 가능하다.)$List2 : var1 var2, val3 val 4 (구분자를 섞어서 사용하면 ,를 기준으로 list가 2개 만들어져서 list2에 들어간다, 이중 리스트) built in fuction을 줘야만 참조가 가능하다. @importcss 파일을 불러오는 경우에는 확장자까지 명시해주어야 한다.여러 파일을 불러올 때@import “file1”, “file2”; @import “../../node_modules/normalize.css/normalize.css”;를 하게되면 css에서는@import url(“../../node_modules/normalize.css); 로 나온다. @media룰 셋 내부에 nested해서 사용할 수 있다. (@media끼리도 가능) @extend12345678.notice a%onlyone &#123;color:red;text-decoration: none;font-weight: bold;&#125;.error &#123;@extend %onlyone;&#125; 1234.notice a.error &#123;color: red;text-decoration: none;font-weight: bold; &#125; 상속받는 룰셋이 placeholder 안으로 들어가게 된다. @at-root중첩을 계속하게 되면 명시도가 높아진다.가독성을 높이면서도 명시도를 높이지 않는 방법123456789101112.sel1 &#123; padding-top: 10px; @at-root .sel2 &#123; margin:10px; @at-root .sel3 &#123; padding: 20px; &#125; .sel4 &#123; font-size: 16px; &#125; &#125; &#125; 123456789101112.sel1 &#123; padding-top: 10px; &#125;.sel2 &#123; margin: 10px; &#125;.sel3 &#123; padding: 20px; &#125;.sel2 .sel4 &#123; font-size: 16px; &#125; 룰을 전역으로 보내준다. 제어문if(논리 표현식, true일 때, false일 때).firstClass { $color: if(true, blue, red); color:$color}if 논리 표현식 {true일 때} -&gt; false 일 때는 삽입되지 않는다..txt1 { color: white; @if normal == bold { font-weight: bold;}} for문 @for $i(변수선언) from 1 through 5 {.col-#{$i} { width: (100/5*$i)+em;}} each123456789101112131415161718192021@each $usr in bob, john, bill &#123;.#&#123;$usr&#125;-icon &#123;background-image: url('/img/#&#123;$usr&#125;.png'); &#125;&#125;// 전역에서 돌리고 있음, 첫번째 돌 때 bob, 두번째 돌 때 john, 세번째 돌 때 bill이 들어감$ppl: ( usr1:bob, usr2:john, usr3:bill );@each $key, $usr in $ppl &#123;.#&#123;$usr&#125;-avatar &#123;background-image: url('/img/#&#123;$usr&#125;.png');&#125;&#125;@each $usr, $color, $value in (usr1, black, 1), (usr2, red, 2), (usr3, blue, 3) &#123;.#&#123;$usr&#125;-icon &#123;background-image: url('/img/#&#123;$usr&#125;.png');border:$value+px solid $color;&#125;&#125; 123456789101112131415161718.bob-icon &#123;background-image: url(\"/img/bob.png\"); &#125;.john-icon &#123;background-image: url(\"/img/john.png\"); &#125;.bill-icon &#123;background-image: url(\"/img/bill.png\"); &#125;.bob-avatar &#123;background-image: url(\"/img/bob.png\"); &#125;.john-avatar &#123;background-image: url(\"/img/john.png\"); &#125;.bill-avatar &#123;background-image: url(\"/img/bill.png\"); &#125;.usr1-icon &#123;background-image: url(\"/img/usr1.png\");border: 1px solid black; &#125; while12345$i:1;@while $i &lt; 5 &#123;.col-sm-#&#123;$i&#125; &#123; width: 50 * $i +px&#125;$i : $i + 1 ; &#125; 12345678.col-sm-1 &#123;width: 50px; &#125;.col-sm-2 &#123;width: 100px; &#125;.col-sm-3 &#123;width: 150px; &#125;.col-sm-4 &#123;width: 200px; &#125; mixin매개변수를 주지 않을 때는 괄호 생략 가능123456789101112131415@mixin boldtext($size, $color) &#123;font:&#123; // font를 prefix로 활용family: 'Malgun Gothic', sans-serif; weight:bold;size:$size;&#125;color:$color; &#125;.boxsample3 &#123;@include boldtext(24px, #000);@include boldtext( $color:red, $size:36px); // 이름과 연결 시켜주면 매개변수의 순서가 달라도 된다.&#125; @include디렉티브를 통해 룰 셋에서 mixin을 호출할 수 있다.호출문은 해당 mixin의 콘텐츠로 치환된다. 12345.boxsample3 &#123;font-family: 'Malgun Gothic', sans-serif;font-weight: bold;font-size: 24px;color: #000; &#125; mixin에서 받는 매개변수의 활용 마지막 매개변수 뒤에 …을 붙여 변수를 지정하면 javascript의 destructuring(구조 분해) 연산자 처럼 가능하다.12345678@mixin box-shadow($shadows...) &#123;-moz-box-shadow: $shadows;-webkit-box-shadow: $shadows;box-shadow: $shadows;&#125;.shadows &#123;@include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);&#125; 1234.shadows &#123;-moz-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;-webkit-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; &#125; 호출문에 … 사용123456789@mixin colors($text, $background, $border) &#123;color: $text;background-color: $background;border-color: $border;&#125;$values: #ff0000, #00ff00, #0000ff;.primary &#123;@include colors($values...);&#125; 1234.primary &#123;color: #ff0000;background-color: #00ff00;border-color: #0000ff; &#125; mixin 응용1123456789101112@mixin conbox &#123; header &#123; height: 100px; @content; // #logo가 header의 밑으로 삽입된다. &#125;&#125;@include conbox &#123;#logo &#123;border:1px solid red;&#125;&#125; 12345header &#123;height: 100px; &#125;header #logo &#123;border: 1px solid red; &#125; mixin 응용2 123456789101112131415161718192021222324252627282930$breakpoints: (small: 767px,medium: 992px,large: 1200px);// 미디어 쿼리를 만들어줌@mixin respond-to($breakpoint) &#123; // 검사하고 싶은 key이름인 breakpoint가 breakpoints 내에 존재한다면~@if map-has-key($breakpoints, $breakpoint) &#123; @media (min-width: #&#123;map-get($breakpoints, $breakpoint)&#125;) &#123; @content; &#125;&#125;// 예외처리 @else &#123; @warn \"Unfortunately, no value could be retrieved from `#&#123;$breakpoint&#125;`. \" + \"Please make sure it is defined in `$breakpoints` map.\"; &#125;&#125;// respond-to안의 변수인 small이 mixin 안의 검사를 통해 breakpoints 안에 있으므로 // #&#123;map-get($breakpoints, $breakpoint)&#125;을 통해 가지고 오고 싶은 small의 값을 가져오게 된다..element &#123; color: hotpink; @include respond-to(small) &#123; color: tomato; &#125;&#125; 12345.element &#123;color: hotpink; &#125;@media (min-width: 767px) &#123;.element &#123;color: tomato; &#125; &#125;","link":"/2019/04/20/190420_SCSS 특강/"}],"tags":[{"name":"Unknown term","slug":"Unknown-term","link":"/tags/Unknown-term/"},{"name":"TIL","slug":"TIL","link":"/tags/TIL/"},{"name":"ComputerEngineering","slug":"ComputerEngineering","link":"/tags/ComputerEngineering/"},{"name":"Algorithm","slug":"Algorithm","link":"/tags/Algorithm/"}],"categories":[{"name":"Unknown_term","slug":"Unknown-term","link":"/categories/Unknown-term/"},{"name":"TIL","slug":"TIL","link":"/categories/TIL/"},{"name":"ComputerEngineering","slug":"ComputerEngineering","link":"/categories/ComputerEngineering/"},{"name":"Algorithm","slug":"Algorithm","link":"/categories/Algorithm/"}]}