{"pages":[{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"190417_Multiples of 3 or 5","text":"문제1. number이하의 숫자가 주어진다. 2. number보다 작은 모든 3의 배수를 다 더한다. 3. number보다 작은 모든 5의 배수를 다 더한다. 4. 다 더한 3의 배수와 5의 배수의 합을 return 5. 단, 3과 5의 공배수는 한번만 더한다. 내 코드123456789101112131415function solution(number) &#123; var count3 = 0; var count5 = 0; for (i = 1; i &lt; number / 3; i++) &#123; var temp = 0; temp = 3 * i; if ((temp % 5) !== 0) &#123; count3 += temp; &#125; &#125; for (i = 1; i &lt; number / 5; i++) &#123; count5 += 5 * i; &#125; return count3 + count5;&#125; 내 풀이 number를 각각 3과 5로 나눈 몫을 구한다. 3의 몫으로 나온 숫자의 미만만큼( i ) 3을 곱하는 반복문으로 3의 배수를 구한다. ex. 몫이 3.5이면 3 x 1, 3 x 2, 3 x 3 = 3, 6, 9를 구함. 3의 배수를 count3이라는 변수에 모두 더한다. 단, 3 x i 를 5로 나눈 나머지가 0이 된다면(5의 배수라면) 더하지 않는다. 5의 몫으로 나온 숫자의 미만만큼( i ) 5를 곱하는 반복문으로 5의 배수를 구한다.ex. 몫이 3.5이면 5 x 1, 5 x 2, 5 x 3 = 5, 10, 15를 구함. 5의 배수를 count5이라는 변수에 모두 더한다.3의 배수를 모두 더하는 과정에서 3과 5의 배수를 제거해줬으므로 5의 배수를 더하는 과정에서는 모두 더해도 상관없다. count3 + count5를 반환한다.","link":"/2019/04/16/190417_Multiples of 3 or 5/"},{"title":"190306_git, web","text":"GitGit : 분산 버전 관리 시스템, 여러 개발자가 같은 프로젝트를 진행할 때 자신의 컴퓨터로 협업하면서 개발이 가능한 시스템이다. git에는 로컬 저장소에 commit하기 전, index 단계가 있다. index 단계는 stage 영역이라고도 한다. stage 영역 : 작업한 내용을 로컬 저장소에 commit하려고 할 때, commit할 파일에 대한 정보를 저장하는 공간이다. Commit 과정 발생한 에러git bash로 git에 있는 폴더를 연결을 하다 에러가 났다. 수업시간에 실습했던 것은 아무 파일이 없는 새 폴더였다. 하지만 기존에 내 git에 있는 폴더에 새 파일을 commit하려고 하니 에러가 발생했다. 에러 메세지에는 git –help라는 말과 git –pull이라는 말이 적혀있었는데 솔직히 무슨 말인지 못알아들었었다. 하지만, 다음 날에 조원과 협업을 하는 과정에서 해결했다. 기존 git의 폴더에 저장된 파일이 있을 경우 내 workspace에다 파일을 끌어와야 했다. [git clone + git폴더 주소 + 주소에 있는 파일을 복사할 내 workspace 폴더의 이름] 이렇게 입력을 먼저 해주고 [git remote get-url origin]과 연결한 workspace 폴더에서 [ls]을 통해 잘 연결되었는지 확인한다. ※ 여기서 origin은 기본값 잘 연결이 되었다면!1. git add index.html (index.html이라는 파일을 만들었다는 가정 하에) 2. git commit 3. git push -u origin master (-u는 처음 commit할 때 한번만 써주면 된다.) ※ 중요한 것은 틈틈히 git status를 통해 상태를 확인하면서 작업할 것!","link":"/2019/03/06/190306_git, web/"},{"title":"190418_Dubstep","text":"문제 문자열에서 “WUB”이라는 문자가 단어의 사이 사이에는 1개 이상 단어의 맨 끝에는 0개 또는 1개가 올 수 있다. “WUB”을 제거하고 단어와 단어 사이에 하나의 공백으로 return ex. WUB WUB I WUB AM WUB WUB X return “I AM X” 내 코드12345678910111213function songDecoder(song) &#123; var join = \"\"; var arr = []; var wub = song.replace(/WUB/gi, \" \"); var a = wub.split(\" \"); for (i = 0; i &lt; a.length; i++) &#123; if (a[i] !== \"\") &#123; arr.push(a[i]); join = arr.join(' '); &#125; &#125; return join;&#125; 내 풀이/search value/ : //사이에 검색할 문자를 입력플래그g는 전체 모든 문자열을 변경한다는 말 : globali는 영문 대소문자 구분 없는 검색: case-intensivem은 여러 줄 검색 : multi-line search 다른 사람 풀이12345function songDecoder(song) &#123; var reg = /@+/gi; song1 = song.replace(/WUB/gi, ‘@’).replace(/@+/gi, ' ').replace(/^ | $/gi,‘’); return song1;&#125; 다른점 1. replace(/WUB/gi, &quot; &quot;)에서 공백을 @로 바꿔줌 replace(/WUB/gi, ‘@’) replace를 한번 더 써서 모든@를 하나의 공백으로 바꿔 줌 replace(/^ | $/gi,‘’) : 처음 시작부터 공백이 있거나 맨 뒤에 공백이 있으면 삭제 팁trim( ) : 문자열 양 끝의 공백을 제거한다.filter(word=&gt;word!=&#39;&#39;) : word라는 변수와 word가 “”(공백)이 아닌 것을 returnfilter(parameter =&gt; return) : 배열에 사용할 수 있음 replace(/(^\\s*)|(\\s*$)/gi, &quot;&quot;) : 맨 앞과 맨 뒤의 공백 제거replace(/(WUB)+/g,&quot; &quot;) : 한번 이상(+)인 WUB를 공백 하나로 바꿔주기","link":"/2019/04/18/190418-Dubstep/"},{"title":"190416_remove-element","text":"문제1. nums에는 정렬되지 않은 배열이 들어옴 2. 배열 nums에서 val값이 있으면 삭제 3. val값이 삭제된 배열 nums의 길이를 return 내 코드123456789var removeElement = function (nums, val) &#123; for (i = 0; i &lt; nums.length; i++) &#123; if (nums.indexOf(val) !== -1) &#123; nums.splice(nums.indexOf(val), 1); i--; &#125; &#125; return nums.length;&#125;; 내 풀이 배열에서 val의 값을 찾아 삭제하기 indexOf를 사용해서 배열 nums안에 있는 val의 index를 반환 splice를 사용해서 배열 nums에서 val의 index를 이용해 제거 오류 경우 1. 123var nums = [2, 2] var val = 2i = 0 일때 nums에서 2가 하나 삭제된다.nums =&gt; [2] i = 1 일때 nums의 길이가 1이 되었으므로 nums.length는 1이 되어 반복문을 빠져나온다.nums =&gt; [2] 오류 발생solution : nums가 하나 삭제될때마다 length가 줄어들고 기존 숫자들의 index가 바뀌기 때문에 i에서 1을 빼주어야 한다. 다른 사람 풀이123456789var removeElement = function (nums, val) &#123; for (var i = 0; i &lt; nums.length; i++) &#123; if (nums[i] === val) &#123; nums.splice(i, 1); i--; &#125; &#125; return nums.length;&#125;; 다른점 1.- nums의 특정 index값과 val을 비교 javascript에는 연산자를 두개를 잘 쓰지 않는다. ===을 쓸 것!","link":"/2019/04/16/190416_remove-element/"},{"title":"190313_hexo","text":"Hexo실행 전 node js, git 설치 필수 node js 버전에 따라 실행되지 않을 수 있다. window는 git bash에서 작업 시 작업 안될 수 있다. npm install -g hexo-cli - 헥소 설치hexo --version - 헥소 버전확인init blog -블로그(파일) 생성cd blog - (블로그 이동)[블로그 안에서 해줘야 함]npm install - npm 설치npm install hexo-deployer-git --savehexo new port &quot;title&quot;hexo generatehexo server - 서버 확인hexo deploy","link":"/2019/03/13/190313_hexo/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","link":"/tags/Algorithm/"},{"name":"Unknown term","slug":"Unknown-term","link":"/tags/Unknown-term/"}],"categories":[{"name":"Algorithm","slug":"Algorithm","link":"/categories/Algorithm/"},{"name":"Unknown term","slug":"Unknown-term","link":"/categories/Unknown-term/"}]}